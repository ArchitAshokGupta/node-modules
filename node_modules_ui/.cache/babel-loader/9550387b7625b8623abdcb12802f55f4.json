{"ast":null,"code":"import _defineProperty from \"/home/architgupta923/data-digital-twin/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport unsupportedProp from '../utils/unsupportedProp';\nimport tabClasses, { getTabUtilityClass } from './tabClasses';\n\nvar overridesResolver = function overridesResolver(props, styles) {\n  var styleProps = props.styleProps;\n  return deepmerge(styles.root || {}, _extends({}, styleProps.label && styleProps.icon && styles.labelIcon, styles[\"textColor\".concat(capitalize(styleProps.textColor))], styleProps.fullWidth && styles.fullWidth, styleProps.wrapped && styles.wrapped, _defineProperty({}, \"& .\".concat(tabClasses.wrapper), styles.wrapper)));\n};\n\nvar useUtilityClasses = function useUtilityClasses(styleProps) {\n  var classes = styleProps.classes,\n      textColor = styleProps.textColor,\n      fullWidth = styleProps.fullWidth,\n      wrapped = styleProps.wrapped,\n      icon = styleProps.icon,\n      label = styleProps.label,\n      selected = styleProps.selected,\n      disabled = styleProps.disabled;\n  var slots = {\n    root: ['root', icon && label && 'labelIcon', \"textColor\".concat(capitalize(textColor)), fullWidth && 'fullWidth', wrapped && 'wrapped', selected && 'selected', disabled && 'disabled'],\n    wrapper: ['wrapper']\n  };\n  return composeClasses(slots, getTabUtilityClass, classes);\n};\n\nvar TabRoot = experimentalStyled(ButtonBase, {}, {\n  name: 'MuiTab',\n  slot: 'Root',\n  overridesResolver: overridesResolver\n})(function (_ref) {\n  var theme = _ref.theme,\n      styleProps = _ref.styleProps;\n  return _extends({}, theme.typography.button, _defineProperty({\n    maxWidth: 264,\n    minWidth: 72,\n    position: 'relative',\n    minHeight: 48,\n    flexShrink: 0,\n    padding: '6px 12px',\n    overflow: 'hidden',\n    whiteSpace: 'normal',\n    textAlign: 'center'\n  }, theme.breakpoints.up('sm'), {\n    minWidth: 160\n  }), styleProps.icon && styleProps.label && _defineProperty({\n    minHeight: 72,\n    paddingTop: 9\n  }, \"& .\".concat(tabClasses.wrapper, \" > *:first-child\"), {\n    marginBottom: 6\n  }), styleProps.textColor === 'inherit' && {\n    color: 'inherit',\n    opacity: 0.7,\n    '&.Mui-selected': {\n      opacity: 1\n    },\n    '&.Mui-disabled': {\n      opacity: theme.palette.action.disabledOpacity\n    }\n  }, styleProps.textColor === 'primary' && {\n    color: theme.palette.text.secondary,\n    '&.Mui-selected': {\n      color: theme.palette.primary.main\n    },\n    '&.Mui-disabled': {\n      color: theme.palette.text.disabled\n    }\n  }, styleProps.textColor === 'secondary' && {\n    color: theme.palette.text.secondary,\n    '&.Mui-selected': {\n      color: theme.palette.secondary.main\n    },\n    '&.Mui-disabled': {\n      color: theme.palette.text.disabled\n    }\n  }, styleProps.fullWidth && {\n    flexShrink: 1,\n    flexGrow: 1,\n    flexBasis: 0,\n    maxWidth: 'none'\n  }, styleProps.wrapped && {\n    fontSize: theme.typography.pxToRem(12),\n    lineHeight: 1.5\n  });\n});\nvar TabWrapper = experimentalStyled('span', {}, {\n  name: 'MuiTab',\n  slot: 'Wrapper'\n})({\n  /* Styles applied to the `icon` and `label`'s wrapper element. */\n  display: 'inline-flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  width: '100%',\n  flexDirection: 'column'\n});\nvar Tab = /*#__PURE__*/React.forwardRef(function Tab(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiTab'\n  });\n\n  var className = props.className,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      fullWidth = props.fullWidth,\n      icon = props.icon,\n      indicator = props.indicator,\n      label = props.label,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      onFocus = props.onFocus,\n      selected = props.selected,\n      selectionFollowsFocus = props.selectionFollowsFocus,\n      _props$textColor = props.textColor,\n      textColor = _props$textColor === void 0 ? 'inherit' : _props$textColor,\n      value = props.value,\n      _props$wrapped = props.wrapped,\n      wrapped = _props$wrapped === void 0 ? false : _props$wrapped,\n      other = _objectWithoutPropertiesLoose(props, [\"className\", \"disabled\", \"disableFocusRipple\", \"fullWidth\", \"icon\", \"indicator\", \"label\", \"onChange\", \"onClick\", \"onFocus\", \"selected\", \"selectionFollowsFocus\", \"textColor\", \"value\", \"wrapped\"]);\n\n  var styleProps = _extends({}, props, {\n    disabled: disabled,\n    disableFocusRipple: disableFocusRipple,\n    selected: selected,\n    icon: !!icon,\n    label: !!label,\n    fullWidth: fullWidth,\n    textColor: textColor,\n    wrapped: wrapped\n  });\n\n  var classes = useUtilityClasses(styleProps);\n\n  var handleClick = function handleClick(event) {\n    if (!selected && onChange) {\n      onChange(event, value);\n    }\n\n    if (onClick) {\n      onClick(event);\n    }\n  };\n\n  var handleFocus = function handleFocus(event) {\n    if (selectionFollowsFocus && !selected && onChange) {\n      onChange(event, value);\n    }\n\n    if (onFocus) {\n      onFocus(event);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(TabRoot, _extends({\n    focusRipple: !disableFocusRipple,\n    className: clsx(classes.root, className),\n    ref: ref,\n    role: \"tab\",\n    \"aria-selected\": selected,\n    disabled: disabled,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    styleProps: styleProps,\n    tabIndex: selected ? 0 : -1\n  }, other), /*#__PURE__*/React.createElement(TabWrapper, {\n    className: classes.wrapper,\n    styleProps: styleProps\n  }, icon, label), indicator);\n});\nprocess.env.NODE_ENV !== \"production\" ? Tab.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusedVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * The icon to display.\n   */\n  icon: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),\n\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any,\n\n  /**\n   * Tab labels appear in a single row.\n   * They can use a second line if needed.\n   * @default false\n   */\n  wrapped: PropTypes.bool\n} : void 0;\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}