{"ast":null,"code":"import _defineProperty from \"/home/architgupta923/data-digital-twin/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport CancelIcon from '../internal/svg-icons/Cancel';\nimport { emphasize, alpha } from '../styles/colorManipulator';\nimport useForkRef from '../utils/useForkRef';\nimport unsupportedProp from '../utils/unsupportedProp';\nimport capitalize from '../utils/capitalize';\nimport ButtonBase from '../ButtonBase';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport chipClasses, { getChipUtilityClass } from './chipClasses';\n\nvar overridesResolver = function overridesResolver(props, styles) {\n  var _extends2;\n\n  var styleProps = props.styleProps;\n  var color = styleProps.color,\n      clickable = styleProps.clickable,\n      onDelete = styleProps.onDelete,\n      size = styleProps.size,\n      variant = styleProps.variant;\n  return deepmerge(styles.root || {}, _extends({}, styles[\"size\".concat(capitalize(size))], styles[\"color\".concat(capitalize(color))], clickable && styles.clickable, clickable && color !== 'default' && styles[\"clickableColor\".concat(capitalize(color), \")\")], onDelete && styles.deletable, onDelete && color !== 'default' && styles[\"deletableColor\".concat(capitalize(color))], styles[variant], variant === 'outlined' && styles[\"outlined\".concat(capitalize(color))], (_extends2 = {}, _defineProperty(_extends2, \"& .\".concat(chipClasses.avatar), _extends({}, styles.avatar, styles[\"avatar\".concat(capitalize(size))], styles[\"avatarColor\".concat(capitalize(color))])), _defineProperty(_extends2, \"& .\".concat(chipClasses.icon), _extends({}, styles.icon, styles[\"icon\".concat(capitalize(size))], styles[\"iconColor\".concat(capitalize(color))])), _defineProperty(_extends2, \"& .\".concat(chipClasses.label), _extends({}, styles.label, styles[\"label\".concat(capitalize(size))])), _defineProperty(_extends2, \"& .\".concat(chipClasses.deleteIcon), _extends({}, styles.deleteIcon, styles[\"deleteIcon\".concat(capitalize(size))], styles[\"deleteIconColor\".concat(capitalize(color))], styles[\"deleteIconOutlinedColor\".concat(capitalize(color))])), _extends2)));\n};\n\nvar useUtilityClasses = function useUtilityClasses(styleProps) {\n  var classes = styleProps.classes,\n      disabled = styleProps.disabled,\n      size = styleProps.size,\n      color = styleProps.color,\n      onDelete = styleProps.onDelete,\n      clickable = styleProps.clickable,\n      variant = styleProps.variant;\n  var slots = {\n    root: ['root', variant, disabled && 'disabled', \"size\".concat(capitalize(size)), \"color\".concat(capitalize(color)), clickable && 'clickable', clickable && \"clickableColor\".concat(capitalize(color)), onDelete && 'deletable', onDelete && \"deletableColor\".concat(capitalize(color)), \"\".concat(variant).concat(capitalize(color))],\n    label: ['label', \"label\".concat(capitalize(size))],\n    avatar: ['avatar', \"avatar\".concat(capitalize(size)), \"avatarColor\".concat(capitalize(color))],\n    icon: ['icon', \"icon\".concat(capitalize(size)), \"iconColor\".concat(capitalize(color))],\n    deleteIcon: ['deleteIcon', \"deleteIcon\".concat(capitalize(size)), \"deleteIconColor\".concat(capitalize(color)), \"deleteIconOutlinedColor\".concat(capitalize(color))]\n  };\n  return composeClasses(slots, getChipUtilityClass, classes);\n};\n\nvar ChipRoot = experimentalStyled('div', {}, {\n  name: 'MuiChip',\n  slot: 'Root',\n  overridesResolver: overridesResolver\n})(function (_ref) {\n  var _extends3;\n\n  var theme = _ref.theme,\n      styleProps = _ref.styleProps;\n  var backgroundColor = theme.palette.mode === 'light' ? theme.palette.grey[300] : theme.palette.grey[700];\n  var deleteIconColor = alpha(theme.palette.text.primary, 0.26);\n  return _extends((_extends3 = {\n    /* Styles applied to the root element. */\n    fontFamily: theme.typography.fontFamily,\n    fontSize: theme.typography.pxToRem(13),\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: 32,\n    color: theme.palette.getContrastText(backgroundColor),\n    backgroundColor: backgroundColor,\n    borderRadius: 32 / 2,\n    whiteSpace: 'nowrap',\n    transition: theme.transitions.create(['background-color', 'box-shadow']),\n    // label will inherit this from root, then `clickable` class overrides this for both\n    cursor: 'default',\n    // We disable the focus ring for mouse, touch and keyboard users.\n    outline: 0,\n    textDecoration: 'none',\n    border: 'none',\n    // Remove `button` border\n    padding: 0,\n    // Remove `button` padding\n    verticalAlign: 'middle',\n    boxSizing: 'border-box',\n    '&.Mui-disabled': {\n      opacity: theme.palette.action.disabledOpacity,\n      pointerEvents: 'none'\n    }\n  }, _defineProperty(_extends3, \"& .\".concat(chipClasses.avatar), {\n    marginLeft: 5,\n    marginRight: -6,\n    width: 24,\n    height: 24,\n    color: theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],\n    fontSize: theme.typography.pxToRem(12)\n  }), _defineProperty(_extends3, \"& .\".concat(chipClasses.avatarColorPrimary), {\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.dark\n  }), _defineProperty(_extends3, \"& .\".concat(chipClasses.avatarColorSecondary), {\n    color: theme.palette.secondary.contrastText,\n    backgroundColor: theme.palette.secondary.dark\n  }), _defineProperty(_extends3, \"& .\".concat(chipClasses.avatarSmall), {\n    marginLeft: 4,\n    marginRight: -4,\n    width: 18,\n    height: 18,\n    fontSize: theme.typography.pxToRem(10)\n  }), _defineProperty(_extends3, \"& .\".concat(chipClasses.icon), _extends({\n    color: theme.palette.mode === 'light' ? theme.palette.grey[700] : theme.palette.grey[300],\n    marginLeft: 5,\n    marginRight: -6\n  }, styleProps.size === 'small' && {\n    fontSize: 18,\n    marginLeft: 4,\n    marginRight: -4\n  }, styleProps.color === 'primary' && {\n    color: 'inherit'\n  }, styleProps.color === 'secondary' && {\n    color: 'inherit'\n  })), _defineProperty(_extends3, \"& .\".concat(chipClasses.deleteIcon), _extends({\n    WebkitTapHighlightColor: 'transparent',\n    color: deleteIconColor,\n    fontSize: 22,\n    cursor: 'pointer',\n    margin: '0 5px 0 -6px',\n    '&:hover': {\n      color: alpha(deleteIconColor, 0.4)\n    }\n  }, styleProps.size === 'small' && {\n    fontSize: 16,\n    marginRight: 4,\n    marginLeft: -4\n  }, styleProps.color === 'primary' && {\n    color: alpha(theme.palette.primary.contrastText, 0.7),\n    '&:hover, &:active': {\n      color: theme.palette.primary.contrastText\n    }\n  }, styleProps.color === 'secondary' && {\n    color: alpha(theme.palette.secondary.contrastText, 0.7),\n    '&:hover, &:active': {\n      color: theme.palette.secondary.contrastText\n    }\n  })), _extends3), styleProps.size === 'small' && {\n    height: 24\n  }, styleProps.color === 'primary' && {\n    backgroundColor: theme.palette.primary.main,\n    color: theme.palette.primary.contrastText\n  }, styleProps.color === 'secondary' && {\n    backgroundColor: theme.palette.secondary.main,\n    color: theme.palette.secondary.contrastText\n  }, styleProps.onDelete && {\n    '&.Mui-focusVisible': {\n      backgroundColor: emphasize(backgroundColor, 0.08)\n    }\n  }, styleProps.onDelete && styleProps.color === 'primary' && {\n    '&.Mui-focusVisible': {\n      backgroundColor: emphasize(theme.palette.primary.main, 0.2)\n    }\n  }, styleProps.onDelete && styleProps.color === 'secondary' && {\n    '&.Mui-focusVisible': {\n      backgroundColor: emphasize(theme.palette.secondary.main, 0.2)\n    }\n  });\n}, function (_ref2) {\n  var theme = _ref2.theme,\n      styleProps = _ref2.styleProps;\n  var backgroundColor = theme.palette.mode === 'light' ? theme.palette.grey[300] : theme.palette.grey[700];\n  return _extends({}, styleProps.clickable && {\n    userSelect: 'none',\n    WebkitTapHighlightColor: 'transparent',\n    cursor: 'pointer',\n    '&:hover, &.Mui-focusVisible': {\n      backgroundColor: emphasize(backgroundColor, 0.08)\n    },\n    '&:active': {\n      boxShadow: theme.shadows[1]\n    }\n  }, styleProps.clickable && styleProps.color === 'primary' && {\n    '&:hover, &.Mui-focusVisible': {\n      backgroundColor: emphasize(theme.palette.primary.main, 0.08)\n    }\n  }, styleProps.clickable && styleProps.color === 'secondary' && {\n    '&:hover, &.Mui-focusVisible': {\n      backgroundColor: emphasize(theme.palette.secondary.main, 0.08)\n    }\n  });\n}, function (_ref3) {\n  var _ref4, _ref5, _ref6;\n\n  var theme = _ref3.theme,\n      styleProps = _ref3.styleProps;\n  return _extends({}, styleProps.variant === 'outlined' && (_ref4 = {\n    backgroundColor: 'transparent',\n    border: \"1px solid \".concat(theme.palette.mode === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)')\n  }, _defineProperty(_ref4, \"&.Mui-focusVisible, .\".concat(chipClasses.clickable, \"&:hover\"), {\n    backgroundColor: alpha(theme.palette.text.primary, theme.palette.action.hoverOpacity)\n  }), _defineProperty(_ref4, \"& .\".concat(chipClasses.avatar), {\n    marginLeft: 4\n  }), _defineProperty(_ref4, \"& .\".concat(chipClasses.avatarSmall), {\n    marginLeft: 2\n  }), _defineProperty(_ref4, \"& .\".concat(chipClasses.icon), {\n    marginLeft: 4\n  }), _defineProperty(_ref4, \"& .\".concat(chipClasses.iconSmall), {\n    marginLeft: 2\n  }), _defineProperty(_ref4, \"& .\".concat(chipClasses.deleteIcon), {\n    marginRight: 5\n  }), _defineProperty(_ref4, \"& .\".concat(chipClasses.deleteIconSmall), {\n    marginRight: 3\n  }), _ref4), styleProps.variant === 'outlined' && styleProps.color === 'primary' && (_ref5 = {\n    color: theme.palette.primary.main,\n    border: \"1px solid \".concat(theme.palette.primary.main)\n  }, _defineProperty(_ref5, \"&.Mui-focusVisible, .\".concat(chipClasses.clickable, \"&:hover\"), {\n    backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity)\n  }), _defineProperty(_ref5, \"& .\".concat(chipClasses.deleteIcon), {\n    color: alpha(theme.palette.primary.main, 0.7),\n    '&:hover, &:active': {\n      color: theme.palette.primary.main\n    }\n  }), _ref5), styleProps.variant === 'outlined' && styleProps.color === 'secondary' && (_ref6 = {\n    color: theme.palette.secondary.main,\n    border: \"1px solid \".concat(theme.palette.secondary.main)\n  }, _defineProperty(_ref6, \"&.Mui-focusVisible, .\".concat(chipClasses.clickable, \"&:hover\"), {\n    backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity)\n  }), _defineProperty(_ref6, \"& .\".concat(chipClasses.deleteIcon), {\n    color: alpha(theme.palette.secondary.main, 0.7),\n    '&:hover, &:active': {\n      color: theme.palette.secondary.main\n    }\n  }), _ref6));\n});\nvar ChipLabel = experimentalStyled('span', {}, {\n  name: 'MuiChip',\n  slot: 'Label'\n})(function (_ref7) {\n  var styleProps = _ref7.styleProps;\n  return _extends({\n    /* Styles applied to the label `span` element. */\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    paddingLeft: 12,\n    paddingRight: 12,\n    whiteSpace: 'nowrap'\n  }, styleProps.size === 'small' && {\n    paddingLeft: 8,\n    paddingRight: 8\n  });\n});\n\nfunction isDeleteKeyboardEvent(keyboardEvent) {\n  return keyboardEvent.key === 'Backspace' || keyboardEvent.key === 'Delete';\n}\n/**\n * Chips represent complex entities in small blocks, such as a contact.\n */\n\n\nvar Chip = /*#__PURE__*/React.forwardRef(function Chip(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiChip'\n  });\n\n  var avatarProp = props.avatar,\n      className = props.className,\n      clickableProp = props.clickable,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      ComponentProp = props.component,\n      deleteIconProp = props.deleteIcon,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      iconProp = props.icon,\n      label = props.label,\n      onClick = props.onClick,\n      onDelete = props.onDelete,\n      onKeyDown = props.onKeyDown,\n      onKeyUp = props.onKeyUp,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? 'filled' : _props$variant,\n      other = _objectWithoutPropertiesLoose(props, [\"avatar\", \"className\", \"clickable\", \"color\", \"component\", \"deleteIcon\", \"disabled\", \"icon\", \"label\", \"onClick\", \"onDelete\", \"onKeyDown\", \"onKeyUp\", \"size\", \"variant\"]);\n\n  var chipRef = React.useRef(null);\n  var handleRef = useForkRef(chipRef, ref);\n\n  var handleDeleteIconClick = function handleDeleteIconClick(event) {\n    // Stop the event from bubbling up to the `Chip`\n    event.stopPropagation();\n\n    if (onDelete) {\n      onDelete(event);\n    }\n  };\n\n  var handleKeyDown = function handleKeyDown(event) {\n    // Ignore events from children of `Chip`.\n    if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {\n      // Will be handled in keyUp, otherwise some browsers\n      // might init navigation\n      event.preventDefault();\n    }\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  };\n\n  var handleKeyUp = function handleKeyUp(event) {\n    // Ignore events from children of `Chip`.\n    if (event.currentTarget === event.target) {\n      if (onDelete && isDeleteKeyboardEvent(event)) {\n        onDelete(event);\n      } else if (event.key === 'Escape' && chipRef.current) {\n        chipRef.current.blur();\n      }\n    }\n\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n  };\n\n  var clickable = clickableProp !== false && onClick ? true : clickableProp;\n  var small = size === 'small';\n  var component = ComponentProp || (clickable || onDelete ? ButtonBase : 'div');\n\n  var styleProps = _extends({}, props, {\n    component: component,\n    disabled: disabled,\n    size: size,\n    color: color,\n    onDelete: !!onDelete,\n    clickable: clickable,\n    variant: variant\n  });\n\n  var classes = useUtilityClasses(styleProps);\n  var moreProps = component === ButtonBase ? {\n    component: 'div',\n    focusVisibleClassName: classes.focusVisible,\n    disableRipple: Boolean(onDelete)\n  } : {};\n  var deleteIcon = null;\n\n  if (onDelete) {\n    var customClasses = clsx(color !== 'default' && (variant === 'outlined' ? classes[\"deleteIconOutlinedColor\".concat(capitalize(color))] : classes[\"deleteIconColor\".concat(capitalize(color))]), small && classes.deleteIconSmall);\n    deleteIcon = deleteIconProp && /*#__PURE__*/React.isValidElement(deleteIconProp) ? /*#__PURE__*/React.cloneElement(deleteIconProp, {\n      className: clsx(deleteIconProp.props.className, classes.deleteIcon, customClasses),\n      onClick: handleDeleteIconClick\n    }) : /*#__PURE__*/React.createElement(CancelIcon, {\n      className: clsx(classes.deleteIcon, customClasses),\n      onClick: handleDeleteIconClick\n    });\n  }\n\n  var avatar = null;\n\n  if (avatarProp && /*#__PURE__*/React.isValidElement(avatarProp)) {\n    avatar = /*#__PURE__*/React.cloneElement(avatarProp, {\n      className: clsx(classes.avatar, avatarProp.props.className)\n    });\n  }\n\n  var icon = null;\n\n  if (iconProp && /*#__PURE__*/React.isValidElement(iconProp)) {\n    icon = /*#__PURE__*/React.cloneElement(iconProp, {\n      className: clsx(classes.icon, iconProp.props.className)\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (avatar && icon) {\n      console.error('Material-UI: The Chip component can not handle the avatar ' + 'and the icon prop at the same time. Pick one.');\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(ChipRoot, _extends({\n    as: component,\n    className: clsx(classes.root, className),\n    disabled: clickable && disabled ? true : undefined,\n    onClick: onClick,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    ref: handleRef,\n    styleProps: styleProps\n  }, moreProps, other), avatar || icon, /*#__PURE__*/React.createElement(ChipLabel, {\n    className: clsx(classes.label),\n    styleProps: styleProps\n  }, label), deleteIcon);\n});\nprocess.env.NODE_ENV !== \"production\" ? Chip.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The Avatar element to display.\n   */\n  avatar: PropTypes.element,\n\n  /**\n   * This prop isn't supported.\n   * Use the `component` prop if you need to change the children structure.\n   */\n  children: unsupportedProp,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the chip will appear clickable, and will raise when pressed,\n   * even if the onClick prop is not defined.\n   * If `false`, the chip will not appear clickable, even if onClick prop is defined.\n   * This can be used, for example,\n   * along with the component prop to indicate an anchor Chip is clickable.\n   * Note: this controls the UI and does not affect the onClick event.\n   */\n  clickable: PropTypes.bool,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color: PropTypes.oneOf(['default', 'primary', 'secondary']),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * Override the default delete icon element. Shown only if `onDelete` is set.\n   */\n  deleteIcon: PropTypes.element,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Icon element.\n   */\n  icon: PropTypes.element,\n\n  /**\n   * The content of the component.\n   */\n  label: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * Callback fired when the delete icon is clicked.\n   * If set, the delete icon will be shown.\n   */\n  onDelete: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyDown: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onKeyUp: PropTypes.func,\n\n  /**\n   * The size of the component.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The variant to use.\n   * @default 'filled'\n   */\n  variant: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([PropTypes.oneOf(['filled', 'outlined']), PropTypes.string])\n} : void 0;\nexport default Chip;","map":null,"metadata":{},"sourceType":"module"}