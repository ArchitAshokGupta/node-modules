{"ast":null,"code":"import _toConsumableArray from \"/home/architgupta923/data-digital-twin/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport styled from '@material-ui/styled-engine';\nimport { propsToClassKey } from '@material-ui/styles';\nimport { unstable_styleFunctionSx as styleFunctionSx } from '@material-ui/system';\nimport defaultTheme from './defaultTheme';\n\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n\nvar getStyleOverrides = function getStyleOverrides(name, theme) {\n  if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {\n    return theme.components[name].styleOverrides;\n  }\n\n  return null;\n};\n\nvar getVariantStyles = function getVariantStyles(name, theme) {\n  var variants = [];\n\n  if (theme && theme.components && theme.components[name] && theme.components[name].variants) {\n    variants = theme.components[name].variants;\n  }\n\n  var variantsStyles = {};\n  variants.forEach(function (definition) {\n    var key = propsToClassKey(definition.props);\n    variantsStyles[key] = definition.style;\n  });\n  return variantsStyles;\n};\n\nvar variantsResolver = function variantsResolver(props, styles, theme, name) {\n  var _theme$components, _theme$components$nam;\n\n  var _props$styleProps = props.styleProps,\n      styleProps = _props$styleProps === void 0 ? {} : _props$styleProps;\n  var variantsStyles = {};\n  var themeVariants = theme === null || theme === void 0 ? void 0 : (_theme$components = theme.components) === null || _theme$components === void 0 ? void 0 : (_theme$components$nam = _theme$components[name]) === null || _theme$components$nam === void 0 ? void 0 : _theme$components$nam.variants;\n\n  if (themeVariants) {\n    themeVariants.forEach(function (themeVariant) {\n      var isMatch = true;\n      Object.keys(themeVariant.props).forEach(function (key) {\n        if (styleProps[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {\n          isMatch = false;\n        }\n      });\n\n      if (isMatch) {\n        variantsStyles = _extends({}, variantsStyles, styles[propsToClassKey(themeVariant.props)]);\n      }\n    });\n  }\n\n  return variantsStyles;\n};\n\nexport var shouldForwardProp = function shouldForwardProp(prop) {\n  return prop !== 'styleProps' && prop !== 'theme' && prop !== 'isRtl' && prop !== 'sx' && prop !== 'as' && prop !== 'classes';\n};\n\nvar lowercaseFirstLetter = function lowercaseFirstLetter(string) {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\nvar experimentalStyled = function experimentalStyled(tag, options) {\n  var muiOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var componentName = muiOptions.name;\n  var componentSlot = muiOptions.slot;\n  var overridesResolver = muiOptions.overridesResolver;\n  var skipVariantsResolver = muiOptions.skipVariantsResolver || false;\n  var skipSx = muiOptions.skipSx || false;\n  var displayName;\n  var name;\n  var className;\n\n  if (componentName) {\n    displayName = \"\".concat(componentName).concat(componentSlot || '');\n    name = !componentSlot || componentSlot === 'Root' ? \"\".concat(componentName) : null;\n    className = \"\".concat(componentName, \"-\").concat(lowercaseFirstLetter(componentSlot || 'Root'));\n  }\n\n  var defaultStyledResolver = styled(tag, _extends({\n    shouldForwardProp: shouldForwardProp,\n    label: className || componentName || ''\n  }, options));\n\n  var muiStyledResolver = function muiStyledResolver(styleArg) {\n    for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      expressions[_key - 1] = arguments[_key];\n    }\n\n    var expressionsWithDefaultTheme = expressions ? expressions.map(function (stylesArg) {\n      return typeof stylesArg === 'function' ? function (_ref) {\n        var themeInput = _ref.theme,\n            other = _objectWithoutPropertiesLoose(_ref, [\"theme\"]);\n\n        return stylesArg(_extends({\n          theme: isEmpty(themeInput) ? defaultTheme : themeInput\n        }, other));\n      } : stylesArg;\n    }) : [];\n    var transformedStyleArg = styleArg;\n\n    if (name && overridesResolver) {\n      expressionsWithDefaultTheme.push(function (props) {\n        var theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n        var styleOverrides = getStyleOverrides(name, theme);\n\n        if (styleOverrides) {\n          return overridesResolver(props, styleOverrides);\n        }\n\n        return null;\n      });\n    }\n\n    if (name && !skipVariantsResolver) {\n      expressionsWithDefaultTheme.push(function (props) {\n        var theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n        return variantsResolver(props, getVariantStyles(name, theme), theme, name);\n      });\n    }\n\n    if (!skipSx) {\n      expressionsWithDefaultTheme.push(function (props) {\n        var theme = isEmpty(props.theme) ? defaultTheme : props.theme;\n        return styleFunctionSx(_extends({}, props, {\n          theme: theme\n        }));\n      });\n    }\n\n    var numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;\n\n    if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {\n      var placeholders = new Array(numOfCustomFnsApplied).fill(''); // If the type is array, than we need to add placeholders in the template for the overrides, variants and the sx styles\n\n      transformedStyleArg = [].concat(_toConsumableArray(styleArg), _toConsumableArray(placeholders));\n      transformedStyleArg.raw = [].concat(_toConsumableArray(styleArg.raw), _toConsumableArray(placeholders));\n    } else if (typeof styleArg === 'function') {\n      // If the type is function, we need to define the default theme\n      transformedStyleArg = function transformedStyleArg(_ref2) {\n        var themeInput = _ref2.theme,\n            other = _objectWithoutPropertiesLoose(_ref2, [\"theme\"]);\n\n        return styleArg(_extends({\n          theme: isEmpty(themeInput) ? defaultTheme : themeInput\n        }, other));\n      };\n    }\n\n    var Component = defaultStyledResolver.apply(void 0, [transformedStyleArg].concat(_toConsumableArray(expressionsWithDefaultTheme)));\n\n    if (displayName || name) {\n      Component.displayName = displayName || name;\n    }\n\n    return Component;\n  };\n\n  return muiStyledResolver;\n};\n\nexport default experimentalStyled;","map":null,"metadata":{},"sourceType":"module"}