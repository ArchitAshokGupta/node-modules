{"ast":null,"code":"import _defineProperty from \"/home/architgupta923/data-digital-twin/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { alpha } from '../styles/colorManipulator';\nimport ButtonBase from '../ButtonBase';\nimport capitalize from '../utils/capitalize';\nimport iconButtonClasses, { getIconButtonUtilityClass } from './iconButtonClasses';\n\nvar overridesResolver = function overridesResolver(props, styles) {\n  var styleProps = props.styleProps;\n  return deepmerge(styles.root || {}, _extends({}, styleProps.color !== 'default' && styles[\"color\".concat(capitalize(styleProps.color))], styleProps.edge && styles[\"edge\".concat(capitalize(styleProps.edge))], styles[\"size\".concat(capitalize(styleProps.size))], _defineProperty({}, \"& .\".concat(iconButtonClasses.label), styles.label)));\n};\n\nvar useUtilityClasses = function useUtilityClasses(styleProps) {\n  var classes = styleProps.classes,\n      disabled = styleProps.disabled,\n      color = styleProps.color,\n      edge = styleProps.edge,\n      size = styleProps.size;\n  var slots = {\n    root: ['root', disabled && 'disabled', color !== 'default' && \"color\".concat(capitalize(color)), edge && \"edge\".concat(capitalize(edge)), \"size\".concat(capitalize(size))],\n    label: ['label']\n  };\n  return composeClasses(slots, getIconButtonUtilityClass, classes);\n};\n\nvar IconButtonRoot = experimentalStyled(ButtonBase, {}, {\n  name: 'MuiIconButton',\n  slot: 'Root',\n  overridesResolver: overridesResolver\n})(function (_ref) {\n  var theme = _ref.theme,\n      styleProps = _ref.styleProps;\n  return _extends({\n    /* Styles applied to the root element. */\n    textAlign: 'center',\n    flex: '0 0 auto',\n    fontSize: theme.typography.pxToRem(24),\n    padding: 12,\n    borderRadius: '50%',\n    overflow: 'visible',\n    // Explicitly set the default value to solve a bug on IE11.\n    color: theme.palette.action.active,\n    transition: theme.transitions.create('background-color', {\n      duration: theme.transitions.duration.shortest\n    }),\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.action.active, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }, styleProps.edge === 'start' && {\n    marginLeft: styleProps.size === 'small' ? -3 : -12\n  }, styleProps.edge === 'end' && {\n    marginRight: styleProps.size === 'small' ? -3 : -12\n  });\n}, function (_ref2) {\n  var theme = _ref2.theme,\n      styleProps = _ref2.styleProps;\n  return _extends({}, styleProps.color === 'inherit' && {\n    color: 'inherit'\n  }, styleProps.color === 'primary' && {\n    color: theme.palette.primary.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.primary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }, styleProps.color === 'secondary' && {\n    color: theme.palette.secondary.main,\n    '&:hover': {\n      backgroundColor: alpha(theme.palette.secondary.main, theme.palette.action.hoverOpacity),\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }, styleProps.size === 'small' && {\n    padding: 3,\n    fontSize: theme.typography.pxToRem(18)\n  }, _defineProperty({}, \"&.\".concat(iconButtonClasses.disabled), {\n    backgroundColor: 'transparent',\n    color: theme.palette.action.disabled\n  }));\n});\nvar IconButtonLabel = experimentalStyled('span', {}, {\n  name: 'MuiIconButton',\n  slot: 'Label'\n})({\n  /* Styles applied to the children container element. */\n  width: '100%',\n  display: 'flex',\n  alignItems: 'inherit',\n  justifyContent: 'inherit'\n});\n/**\n * Refer to the [Icons](/components/icons/) section of the documentation\n * regarding the available icon options.\n */\n\nvar IconButton = /*#__PURE__*/React.forwardRef(function IconButton(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiIconButton'\n  });\n\n  var _props$edge = props.edge,\n      edge = _props$edge === void 0 ? false : _props$edge,\n      children = props.children,\n      className = props.className,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'default' : _props$color,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      other = _objectWithoutPropertiesLoose(props, [\"edge\", \"children\", \"className\", \"color\", \"disabled\", \"disableFocusRipple\", \"size\"]);\n\n  var styleProps = _extends({}, props, {\n    edge: edge,\n    color: color,\n    disabled: disabled,\n    disableFocusRipple: disableFocusRipple,\n    size: size\n  });\n\n  var classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/React.createElement(IconButtonRoot, _extends({\n    className: clsx(classes.root, className),\n    centerRipple: true,\n    focusRipple: !disableFocusRipple,\n    disabled: disabled,\n    ref: ref,\n    styleProps: styleProps\n  }, other), /*#__PURE__*/React.createElement(IconButtonLabel, {\n    className: classes.label,\n    styleProps: styleProps\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? IconButton.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The icon to display.\n   */\n  children: chainPropTypes(PropTypes.node, function (props) {\n    var found = React.Children.toArray(props.children).some(function (child) {\n      return /*#__PURE__*/React.isValidElement(child) && child.props.onClick;\n    });\n\n    if (found) {\n      return new Error(['Material-UI: You are providing an onClick event listener to a child of a button element.', 'Prefer applying it to the IconButton directly.', 'This guarantees that the whole <button> will be responsive to click events.'].join('\\n'));\n    }\n\n    return null;\n  }),\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'default'\n   */\n  color: PropTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusedVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * If given, uses a negative margin to counteract the padding on one\n   * side (this is often helpful for aligning the left or right\n   * side of the icon with content above or below, without ruining the border\n   * size and shape).\n   * @default false\n   */\n  edge: PropTypes.oneOf(['end', 'start', false]),\n\n  /**\n   * The size of the component.\n   * `small` is equivalent to the dense button styling.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['medium', 'small']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object\n} : void 0;\nexport default IconButton;","map":null,"metadata":{},"sourceType":"module"}