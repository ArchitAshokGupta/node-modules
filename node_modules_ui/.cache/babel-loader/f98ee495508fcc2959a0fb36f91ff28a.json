{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport StepConnector from '../StepConnector';\nimport StepperContext from './StepperContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex'\n  },\n\n  /* Styles applied to the root element if `orientation=\"horizontal\"`. */\n  horizontal: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n\n  /* Styles applied to the root element if `orientation=\"vertical\"`. */\n  vertical: {\n    flexDirection: 'column'\n  },\n\n  /* Styles applied to the root element if `alternativeLabel={true}`. */\n  alternativeLabel: {\n    alignItems: 'flex-start'\n  }\n};\nvar defaultConnector = /*#__PURE__*/React.createElement(StepConnector, null);\nvar Stepper = /*#__PURE__*/React.forwardRef(function Stepper(props, ref) {\n  var _props$activeStep = props.activeStep,\n      activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep,\n      _props$alternativeLab = props.alternativeLabel,\n      alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,\n      children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$connector = props.connector,\n      connector = _props$connector === void 0 ? defaultConnector : _props$connector,\n      _props$nonLinear = props.nonLinear,\n      nonLinear = _props$nonLinear === void 0 ? false : _props$nonLinear,\n      _props$orientation = props.orientation,\n      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,\n      other = _objectWithoutPropertiesLoose(props, [\"activeStep\", \"alternativeLabel\", \"children\", \"classes\", \"className\", \"connector\", \"nonLinear\", \"orientation\"]);\n\n  var childrenArray = React.Children.toArray(children);\n  var steps = childrenArray.map(function (step, index) {\n    return /*#__PURE__*/React.cloneElement(step, _extends({\n      index: index,\n      last: index + 1 === childrenArray.length\n    }, step.props));\n  });\n  var contextValue = React.useMemo(function () {\n    return {\n      activeStep: activeStep,\n      alternativeLabel: alternativeLabel,\n      connector: connector,\n      nonLinear: nonLinear,\n      orientation: orientation\n    };\n  }, [activeStep, alternativeLabel, connector, nonLinear, orientation]);\n  return /*#__PURE__*/React.createElement(StepperContext.Provider, {\n    value: contextValue\n  }, /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel),\n    ref: ref\n  }, other), steps));\n});\nprocess.env.NODE_ENV !== \"production\" ? Stepper.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * Set the active step (zero based index).\n   * Set to -1 to disable all the steps.\n   * @default 0\n   */\n  activeStep: PropTypes.number,\n\n  /**\n   * If set to 'true' and orientation is horizontal,\n   * then the step label will be positioned under the icon.\n   * @default false\n   */\n  alternativeLabel: PropTypes.bool,\n\n  /**\n   * Two or more `<Step />` components.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * An element to be placed between each step.\n   * @default <StepConnector />\n   */\n  connector: PropTypes.element,\n\n  /**\n   * If set the `Stepper` will not assist in controlling steps for linear flow.\n   * @default false\n   */\n  nonLinear: PropTypes.bool,\n\n  /**\n   * The component orientation (layout flow direction).\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiStepper'\n})(Stepper);","map":null,"metadata":{},"sourceType":"module"}