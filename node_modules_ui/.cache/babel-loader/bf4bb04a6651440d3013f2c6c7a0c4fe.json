{"ast":null,"code":"import _defineProperty from \"/home/architgupta923/data-digital-twin/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { deepmerge } from '@material-ui/utils';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport capitalize from '../utils/capitalize';\nimport imageListItemBarClasses, { getImageListItemBarUtilityClass } from './imageListItemBarClasses';\n\nvar overridesResolver = function overridesResolver(props, styles) {\n  var _extends2;\n\n  var styleProps = props.styleProps;\n  return deepmerge(styles.root || {}, _extends({}, styles[\"position\".concat(capitalize(styleProps.position))], (_extends2 = {}, _defineProperty(_extends2, \"& .\".concat(imageListItemBarClasses.titleWrap), _extends({}, styles.titleWrap, styles[\"titleWrap\".concat(capitalize(styleProps.position))], styleProps.actionIcon && styles[\"titleWrapActionPos\".concat(capitalize(styleProps.actionPosition))])), _defineProperty(_extends2, \"& .\".concat(imageListItemBarClasses.title), styles.title), _defineProperty(_extends2, \"& .\".concat(imageListItemBarClasses.subtitle), styles.subtitle), _defineProperty(_extends2, \"& .\".concat(imageListItemBarClasses.actionIcon), _extends({}, styles.actionIcon, styles[\"actionIconActionPos\".concat(capitalize(styleProps.actionPosition))])), _extends2)));\n};\n\nvar useUtilityClasses = function useUtilityClasses(styleProps) {\n  var classes = styleProps.classes,\n      position = styleProps.position,\n      actionIcon = styleProps.actionIcon,\n      actionPosition = styleProps.actionPosition;\n  var slots = {\n    root: ['root', \"position\".concat(capitalize(position))],\n    titleWrap: ['titleWrap', \"titleWrap\".concat(capitalize(position)), actionIcon && \"titleWrapActionPos\".concat(capitalize(actionPosition))],\n    title: ['title'],\n    subtitle: ['subtitle'],\n    actionIcon: ['actionIcon', \"actionIconActionPos\".concat(capitalize(actionPosition))]\n  };\n  return composeClasses(slots, getImageListItemBarUtilityClass, classes);\n};\n\nvar ImageListItemBarRoot = experimentalStyled('div', {}, {\n  name: 'MuiImageListItemBar',\n  slot: 'Root',\n  overridesResolver: overridesResolver\n})(function (_ref) {\n  var theme = _ref.theme,\n      styleProps = _ref.styleProps;\n  return _extends({\n    /* Styles applied to the root element. */\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    background: 'rgba(0, 0, 0, 0.5)',\n    display: 'flex',\n    alignItems: 'center',\n    fontFamily: theme.typography.fontFamily\n  }, styleProps.position === 'bottom' && {\n    bottom: 0\n  }, styleProps.position === 'top' && {\n    top: 0\n  }, styleProps.position === 'below' && {\n    position: 'relative',\n    background: 'transparent',\n    alignItems: 'normal'\n  });\n});\nvar ImageListItemBarTitleWrap = experimentalStyled('div', {}, {\n  name: 'MuiImageListItemBar',\n  slot: 'TitleWrap'\n})(function (_ref2) {\n  var theme = _ref2.theme,\n      styleProps = _ref2.styleProps;\n  return _extends({\n    /* Styles applied to the title and subtitle container element. */\n    flexGrow: 1,\n    padding: '12px 16px',\n    color: theme.palette.common.white,\n    overflow: 'hidden'\n  }, styleProps.position === 'below' && {\n    padding: '6px 0 12px',\n    color: 'inherit'\n  }, styleProps.actionIcon && styleProps.actionPosition === 'left' && {\n    paddingLeft: 0\n  }, styleProps.actionIcon && styleProps.actionPosition === 'right' && {\n    paddingRight: 0\n  });\n});\nvar ImageListItemBarTitle = experimentalStyled('div', {}, {\n  name: 'MuiImageListItemBar',\n  slot: 'Title'\n})(function (_ref3) {\n  var theme = _ref3.theme;\n  return {\n    /* Styles applied to the title container element. */\n    fontSize: theme.typography.pxToRem(16),\n    lineHeight: '24px',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  };\n});\nvar ImageListItemBarSubtitle = experimentalStyled('div', {}, {\n  name: 'MuiImageListItemBar',\n  slot: 'Subtitle'\n})(function (_ref4) {\n  var theme = _ref4.theme;\n  return {\n    /* Styles applied to the subtitle container element. */\n    fontSize: theme.typography.pxToRem(12),\n    lineHeight: 1,\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap'\n  };\n});\nvar ImageListItemBarActionIcon = experimentalStyled('div', {}, {\n  name: 'MuiImageListItemBar',\n  slot: 'ActionIcon'\n})(function (_ref5) {\n  var styleProps = _ref5.styleProps;\n  return _extends({}, styleProps.actionPosition === 'left' && {\n    order: -1\n  });\n});\nvar ImageListItemBar = /*#__PURE__*/React.forwardRef(function ImageListItemBar(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiImageListItemBar'\n  });\n\n  var actionIcon = props.actionIcon,\n      _props$actionPosition = props.actionPosition,\n      actionPosition = _props$actionPosition === void 0 ? 'right' : _props$actionPosition,\n      className = props.className,\n      subtitle = props.subtitle,\n      title = props.title,\n      _props$position = props.position,\n      position = _props$position === void 0 ? 'bottom' : _props$position,\n      other = _objectWithoutPropertiesLoose(props, [\"actionIcon\", \"actionPosition\", \"className\", \"subtitle\", \"title\", \"position\"]);\n\n  var styleProps = _extends({}, props, {\n    position: position,\n    actionPosition: actionPosition\n  });\n\n  var classes = useUtilityClasses(styleProps);\n  return /*#__PURE__*/React.createElement(ImageListItemBarRoot, _extends({\n    styleProps: styleProps,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(ImageListItemBarTitleWrap, {\n    styleProps: styleProps,\n    className: classes.titleWrap\n  }, /*#__PURE__*/React.createElement(ImageListItemBarTitle, {\n    className: classes.title\n  }, title), subtitle ? /*#__PURE__*/React.createElement(ImageListItemBarSubtitle, {\n    className: classes.subtitle\n  }, subtitle) : null), actionIcon ? /*#__PURE__*/React.createElement(ImageListItemBarActionIcon, {\n    styleProps: styleProps,\n    className: classes.actionIcon\n  }, actionIcon) : null);\n});\nprocess.env.NODE_ENV !== \"production\" ? ImageListItemBar.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * An IconButton element to be used as secondary action target\n   * (primary action target is the item itself).\n   */\n  actionIcon: PropTypes.node,\n\n  /**\n   * Position of secondary action IconButton.\n   * @default 'right'\n   */\n  actionPosition: PropTypes.oneOf(['left', 'right']),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Position of the title bar.\n   * @default 'bottom'\n   */\n  position: PropTypes.oneOf(['below', 'bottom', 'top']),\n\n  /**\n   * String or element serving as subtitle (support text).\n   */\n  subtitle: PropTypes.node,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * Title to be displayed.\n   */\n  title: PropTypes.node\n} : void 0;\nexport default ImageListItemBar;","map":null,"metadata":{},"sourceType":"module"}