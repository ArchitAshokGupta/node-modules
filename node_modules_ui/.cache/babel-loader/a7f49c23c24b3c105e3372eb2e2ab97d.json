{"ast":null,"code":"import _defineProperty from \"/home/architgupta923/data-digital-twin/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/home/architgupta923/data-digital-twin/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { chainPropTypes, deepmerge } from '@material-ui/utils';\nimport { SliderUnstyled, SliderValueLabelUnstyled, sliderUnstyledClasses, getSliderUtilityClass, generateUtilityClasses, isHostComponent } from '@material-ui/unstyled';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport { alpha, lighten, darken } from '../styles/colorManipulator';\nimport capitalize from '../utils/capitalize';\nexport var sliderClasses = _extends({}, sliderUnstyledClasses, generateUtilityClasses('MuiSlider', ['colorPrimary', 'colorSecondary', 'thumbColorPrimary', 'thumbColorSecondary']));\n\nvar overridesResolver = function overridesResolver(props, styles) {\n  var _extends4;\n\n  var styleProps = props.styleProps;\n  var marks = styleProps.marksProp === true && styleProps.step !== null ? _toConsumableArray(Array(Math.floor((styleProps.max - styleProps.min) / styleProps.step) + 1)).map(function (_, index) {\n    return {\n      value: styleProps.min + styleProps.step * index\n    };\n  }) : styleProps.marksProp || [];\n  var marked = marks.length > 0 && marks.some(function (mark) {\n    return mark.label;\n  });\n  return deepmerge(styles.root || {}, _extends({}, styles[\"color\".concat(capitalize(styleProps.color))], _defineProperty({}, \"&.\".concat(sliderClasses.disabled), styles.disabled), marked && styles.marked, styleProps.orientation === 'vertical' && styles.vertical, styleProps.track === 'inverted' && styles.trackInverted, styleProps.track === false && styles.trackFalse, (_extends4 = {}, _defineProperty(_extends4, \"& .\".concat(sliderClasses.rail), styles.rail), _defineProperty(_extends4, \"& .\".concat(sliderClasses.track), styles.track), _defineProperty(_extends4, \"& .\".concat(sliderClasses.mark), styles.mark), _defineProperty(_extends4, \"& .\".concat(sliderClasses.markLabel), styles.markLabel), _defineProperty(_extends4, \"& .\".concat(sliderClasses.valueLabel), styles.valueLabel), _defineProperty(_extends4, \"& .\".concat(sliderClasses.thumb), _extends({}, styles.thumb, styles[\"thumbColor\".concat(capitalize(styleProps.color))], _defineProperty({}, \"&.\".concat(sliderClasses.disabled), styles.disabled))), _extends4)));\n};\n\nexport var SliderRoot = experimentalStyled('span', {}, {\n  name: 'MuiSlider',\n  slot: 'Root',\n  overridesResolver: overridesResolver\n})(function (_ref) {\n  var _extends6;\n\n  var theme = _ref.theme,\n      styleProps = _ref.styleProps;\n  return _extends({\n    height: 2,\n    width: '100%',\n    boxSizing: 'content-box',\n    padding: '13px 0',\n    display: 'inline-block',\n    position: 'relative',\n    cursor: 'pointer',\n    touchAction: 'none',\n    color: theme.palette.primary.main,\n    WebkitTapHighlightColor: 'transparent'\n  }, styleProps.color === 'secondary' && {\n    color: theme.palette.secondary.main\n  }, _defineProperty({}, \"&.\".concat(sliderClasses.disabled), {\n    pointerEvents: 'none',\n    cursor: 'default',\n    color: theme.palette.grey[400]\n  }), styleProps.orientation === 'vertical' && {\n    width: 2,\n    height: '100%',\n    padding: '0 13px'\n  }, {\n    // The primary input mechanism of the device includes a pointing device of limited accuracy.\n    '@media (pointer: coarse)': _extends({\n      // Reach 42px touch target, about ~8mm on screen.\n      padding: '20px 0'\n    }, styleProps.orientation === 'vertical' && {\n      padding: '0 20px'\n    }),\n    '@media print': {\n      colorAdjust: 'exact'\n    }\n  }, styleProps.marked && _extends({\n    marginBottom: 20\n  }, styleProps.orientation === 'vertical' && {\n    marginBottom: 'auto',\n    marginRight: 20\n  }), (_extends6 = {}, _defineProperty(_extends6, \"& .\".concat(sliderClasses.valueLabelCircle), {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 32,\n    height: 32,\n    borderRadius: '50% 50% 50% 0',\n    backgroundColor: 'currentColor',\n    transform: 'rotate(-45deg)'\n  }), _defineProperty(_extends6, \"& .\".concat(sliderClasses.valueLabelLabel), {\n    color: theme.palette.primary.contrastText,\n    transform: 'rotate(45deg)',\n    textAlign: 'center'\n  }), _extends6));\n});\nexport var SliderRail = experimentalStyled('span', {}, {\n  name: 'MuiSlider',\n  slot: 'Rail'\n})(function (_ref2) {\n  var styleProps = _ref2.styleProps;\n  return _extends({\n    display: 'block',\n    position: 'absolute',\n    width: '100%',\n    height: 2,\n    borderRadius: 1,\n    backgroundColor: 'currentColor',\n    opacity: 0.38\n  }, styleProps.orientation === 'vertical' && {\n    height: '100%',\n    width: 2\n  }, styleProps.track === 'inverted' && {\n    opacity: 1\n  });\n});\nexport var SliderTrack = experimentalStyled('span', {}, {\n  name: 'MuiSlider',\n  slot: 'Track'\n})(function (_ref3) {\n  var theme = _ref3.theme,\n      styleProps = _ref3.styleProps;\n  return _extends({\n    display: 'block',\n    position: 'absolute',\n    height: 2,\n    borderRadius: 1,\n    backgroundColor: 'currentColor'\n  }, styleProps.orientation === 'vertical' && {\n    width: 2\n  }, styleProps.track === false && {\n    display: 'none'\n  }, styleProps.track === 'inverted' && {\n    backgroundColor: // Same logic as the LinearProgress track color\n    theme.palette.mode === 'light' ? lighten(theme.palette.primary.main, 0.62) : darken(theme.palette.primary.main, 0.5)\n  });\n});\nexport var SliderThumb = experimentalStyled('span', {}, {\n  name: 'MuiSlider',\n  slot: 'Thumb'\n})(function (_ref4) {\n  var _extends7, _ref5;\n\n  var theme = _ref4.theme,\n      styleProps = _ref4.styleProps;\n  return _extends((_extends7 = {\n    position: 'absolute',\n    width: 12,\n    height: 12,\n    marginLeft: -6,\n    marginTop: -5,\n    boxSizing: 'border-box',\n    borderRadius: '50%',\n    outline: 0,\n    backgroundColor: 'currentColor',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    transition: theme.transitions.create(['box-shadow'], {\n      duration: theme.transitions.duration.shortest\n    }),\n    '&::after': {\n      position: 'absolute',\n      content: '\"\"',\n      borderRadius: '50%',\n      // reach 42px hit target (2 * 15 + thumb diameter)\n      left: -15,\n      top: -15,\n      right: -15,\n      bottom: -15\n    }\n  }, _defineProperty(_extends7, \"&:hover, &.\".concat(sliderClasses.focusVisible), {\n    boxShadow: \"0px 0px 0px 8px \".concat(alpha(theme.palette.primary.main, 0.16)),\n    '@media (hover: none)': {\n      boxShadow: 'none'\n    }\n  }), _defineProperty(_extends7, \"&.\".concat(sliderClasses.active), {\n    boxShadow: \"0px 0px 0px 14px \".concat(alpha(theme.palette.primary.main, 0.16))\n  }), _defineProperty(_extends7, \"&.\".concat(sliderClasses.disabled), _extends({\n    width: 8,\n    height: 8,\n    marginLeft: -4,\n    marginTop: -3\n  }, styleProps.orientation === 'vertical' && {\n    marginLeft: -3,\n    marginBottom: -4\n  }, {\n    '&:hover': {\n      boxShadow: 'none'\n    }\n  })), _extends7), styleProps.orientation === 'vertical' && {\n    marginLeft: -5,\n    marginBottom: -6\n  }, styleProps.color === 'secondary' && (_ref5 = {}, _defineProperty(_ref5, \"&:hover, &.\".concat(sliderClasses.focusVisible), {\n    boxShadow: \"0px 0px 0px 8px \".concat(alpha(theme.palette.secondary.main, 0.16))\n  }), _defineProperty(_ref5, \"&.\".concat(sliderClasses.active), {\n    boxShadow: \"0px 0px 0px 14px \".concat(alpha(theme.palette.secondary.main, 0.16))\n  }), _ref5));\n});\nexport var SliderValueLabel = experimentalStyled(SliderValueLabelUnstyled, {}, {\n  name: 'MuiSlider',\n  slot: 'ValueLabel'\n})(function (_ref6) {\n  var _extends8;\n\n  var theme = _ref6.theme;\n  return _extends((_extends8 = {\n    // IE 11 centering bug, to remove from the customization demos once no longer supported\n    left: 'calc(-50% - 4px)'\n  }, _defineProperty(_extends8, \"&.\".concat(sliderClasses.valueLabelOpen), {\n    transform: 'scale(1) translateY(-10px)'\n  }), _defineProperty(_extends8, \"zIndex\", 1), _extends8), theme.typography.body2, {\n    fontSize: theme.typography.pxToRem(12),\n    lineHeight: 1.2,\n    transition: theme.transitions.create(['transform'], {\n      duration: theme.transitions.duration.shortest\n    }),\n    top: -34,\n    transformOrigin: 'bottom center',\n    transform: 'scale(0)',\n    position: 'absolute'\n  });\n});\nexport var SliderMark = experimentalStyled('span', {}, {\n  name: 'MuiSlider',\n  slot: 'Mark'\n})(function (_ref7) {\n  var theme = _ref7.theme,\n      styleProps = _ref7.styleProps;\n  return _extends({\n    position: 'absolute',\n    width: 2,\n    height: 2,\n    borderRadius: 1,\n    backgroundColor: 'currentColor'\n  }, styleProps.markActive && {\n    backgroundColor: theme.palette.background.paper,\n    opacity: 0.8\n  });\n});\nexport var SliderMarkLabel = experimentalStyled('span', {}, {\n  name: 'MuiSlider',\n  slot: 'MarkLabel'\n})(function (_ref8) {\n  var theme = _ref8.theme,\n      styleProps = _ref8.styleProps;\n  return _extends({}, theme.typography.body2, {\n    color: theme.palette.text.secondary,\n    position: 'absolute',\n    top: 26,\n    transform: 'translateX(-50%)',\n    whiteSpace: 'nowrap'\n  }, styleProps.orientation === 'vertical' && {\n    top: 'auto',\n    left: 26,\n    transform: 'translateY(50%)'\n  }, {\n    '@media (pointer: coarse)': _extends({\n      top: 40\n    }, styleProps.orientation === 'vertical' && {\n      left: 31\n    })\n  }, styleProps.markLabelActive && {\n    color: theme.palette.text.primary\n  });\n});\nSliderRoot.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  styleProps: PropTypes.shape({\n    'aria-label': PropTypes.string,\n    'aria-labelledby': PropTypes.string,\n    'aria-valuetext': PropTypes.string,\n    classes: PropTypes.object,\n    color: PropTypes.oneOf(['primary', 'secondary']),\n    defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    disabled: PropTypes.bool,\n    getAriaLabel: PropTypes.func,\n    getAriaValueText: PropTypes.func,\n    isRtl: PropTypes.bool,\n    marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n      label: PropTypes.node,\n      value: PropTypes.number.isRequired\n    })), PropTypes.bool]),\n    max: PropTypes.number,\n    min: PropTypes.number,\n    name: PropTypes.string,\n    onChange: PropTypes.func,\n    onChangeCommitted: PropTypes.func,\n    orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n    scale: PropTypes.func,\n    step: PropTypes.number,\n    track: PropTypes.oneOf(['inverted', 'normal', false]),\n    value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n    valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on']),\n    valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n  })\n};\n\nvar extendUtilityClasses = function extendUtilityClasses(styleProps) {\n  var color = styleProps.color,\n      _styleProps$classes = styleProps.classes,\n      classes = _styleProps$classes === void 0 ? {} : _styleProps$classes;\n  return _extends({}, classes, {\n    root: clsx(classes.root, getSliderUtilityClass(\"color\".concat(capitalize(color))), classes[\"color\".concat(capitalize(color))]),\n    thumb: clsx(classes.thumb, getSliderUtilityClass(\"thumbColor\".concat(capitalize(color))), classes[\"thumbColor\".concat(capitalize(color))])\n  });\n};\n\nvar shouldSpreadStyleProps = function shouldSpreadStyleProps(Component) {\n  return !Component || !isHostComponent(Component);\n};\n\nvar Slider = /*#__PURE__*/React.forwardRef(function Slider(inputProps, ref) {\n  var _componentsProps$root, _componentsProps$thum;\n\n  var props = useThemeProps({\n    props: inputProps,\n    name: 'MuiSlider'\n  });\n\n  var _props$components = props.components,\n      components = _props$components === void 0 ? {} : _props$components,\n      _props$componentsProp = props.componentsProps,\n      componentsProps = _props$componentsProp === void 0 ? {} : _props$componentsProp,\n      _props$color = props.color,\n      color = _props$color === void 0 ? 'primary' : _props$color,\n      other = _objectWithoutPropertiesLoose(props, [\"components\", \"componentsProps\", \"color\"]);\n\n  var styleProps = _extends({}, props, {\n    color: color\n  });\n\n  var classes = extendUtilityClasses(styleProps);\n  return /*#__PURE__*/React.createElement(SliderUnstyled, _extends({}, other, {\n    components: _extends({\n      Root: SliderRoot,\n      Rail: SliderRail,\n      Track: SliderTrack,\n      Thumb: SliderThumb,\n      ValueLabel: SliderValueLabel,\n      Mark: SliderMark,\n      MarkLabel: SliderMarkLabel\n    }, components),\n    componentsProps: _extends({}, componentsProps, {\n      root: _extends({}, componentsProps.root, shouldSpreadStyleProps(components.Root) && {\n        styleProps: _extends({}, (_componentsProps$root = componentsProps.root) === null || _componentsProps$root === void 0 ? void 0 : _componentsProps$root.styleProps, {\n          color: color\n        })\n      }),\n      thumb: _extends({}, componentsProps.thumb, shouldSpreadStyleProps(components.Thumb) && {\n        styleProps: _extends({}, (_componentsProps$thum = componentsProps.thumb) === null || _componentsProps$thum === void 0 ? void 0 : _componentsProps$thum.styleProps, {\n          color: color\n        })\n      })\n    }),\n    classes: classes,\n    ref: ref\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? Slider.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The label of the slider.\n   */\n  'aria-label': chainPropTypes(PropTypes.string, function (props) {\n    var range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-label'] != null) {\n      return new Error('Material-UI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * The id of the element containing a label for the slider.\n   */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * A string value that provides a user-friendly name for the current value of the slider.\n   */\n  'aria-valuetext': chainPropTypes(PropTypes.string, function (props) {\n    var range = Array.isArray(props.value || props.defaultValue);\n\n    if (range && props['aria-valuetext'] != null) {\n      return new Error('Material-UI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.');\n    }\n\n    return null;\n  }),\n\n  /**\n   * @ignore\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * @default {}\n   */\n  classes: PropTypes.object,\n\n  /**\n   * The color of the component. It supports those theme colors that make sense for this component.\n   * @default 'primary'\n   */\n  color: PropTypes.oneOf(['primary', 'secondary']),\n\n  /**\n   * The components used for each slot inside the Slider.\n   * Either a string to use a HTML element or a component.\n   * @default {}\n   */\n  components: PropTypes.shape({\n    Mark: PropTypes.elementType,\n    MarkLabel: PropTypes.elementType,\n    Rail: PropTypes.elementType,\n    Root: PropTypes.elementType,\n    Thumb: PropTypes.elementType,\n    Track: PropTypes.elementType,\n    ValueLabel: PropTypes.elementType\n  }),\n\n  /**\n   * The props used for each slot inside the Slider.\n   * @default {}\n   */\n  componentsProps: PropTypes.object,\n\n  /**\n   * The default value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.\n   *\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaLabel: PropTypes.func,\n\n  /**\n   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.\n   *\n   * @param {number} value The thumb label's value to format.\n   * @param {number} index The thumb label's index to format.\n   * @returns {string}\n   */\n  getAriaValueText: PropTypes.func,\n\n  /**\n   * Indicates whether the theme context has rtl direction. It is set automatically.\n   * @default false\n   */\n  isRtl: PropTypes.bool,\n\n  /**\n   * Marks indicate predetermined values to which the user can move the slider.\n   * If `true` the marks are spaced according the value of the `step` prop.\n   * If an array, it should contain objects with `value` and an optional `label` keys.\n   * @default false\n   */\n  marks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.node,\n    value: PropTypes.number.isRequired\n  })), PropTypes.bool]),\n\n  /**\n   * The maximum allowed value of the slider.\n   * Should not be equal to min.\n   * @default 100\n   */\n  max: PropTypes.number,\n\n  /**\n   * The minimum allowed value of the slider.\n   * Should not be equal to max.\n   * @default 0\n   */\n  min: PropTypes.number,\n\n  /**\n   * Name attribute of the hidden `input` element.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback function that is fired when the slider's value changed.\n   *\n   * @param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Callback function that is fired when the `mouseup` is triggered.\n   *\n   * @param {object} event The event source of the callback. **Warning**: This is a generic event not a change event.\n   * @param {number | number[]} value The new value.\n   */\n  onChangeCommitted: PropTypes.func,\n\n  /**\n   * The component orientation.\n   * @default 'horizontal'\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * A transformation function, to change the scale of the slider.\n   * @default (x) => x\n   */\n  scale: PropTypes.func,\n\n  /**\n   * The granularity with which the slider can step through values. (A \"discrete\" slider.)\n   * The `min` prop serves as the origin for the valid values.\n   * We recommend (max - min) to be evenly divisible by the step.\n   *\n   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.\n   * @default 1\n   */\n  step: PropTypes.number,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The track presentation:\n   *\n   * - `normal` the track will render a bar representing the slider value.\n   * - `inverted` the track will render a bar representing the remaining slider value.\n   * - `false` the track will render without a bar.\n   * @default 'normal'\n   */\n  track: PropTypes.oneOf(['inverted', 'normal', false]),\n\n  /**\n   * The value of the slider.\n   * For ranged sliders, provide an array with two values.\n   */\n  value: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number]),\n\n  /**\n   * Controls when the value label is displayed:\n   *\n   * - `auto` the value label will display when the thumb is hovered or focused.\n   * - `on` will display persistently.\n   * - `off` will never display.\n   * @default 'off'\n   */\n  valueLabelDisplay: PropTypes.oneOf(['auto', 'off', 'on']),\n\n  /**\n   * The format function the value label's value.\n   *\n   * When a function is provided, it should have the following signature:\n   *\n   * - {number} value The value label's value to format\n   * - {number} index The value label's index to format\n   * @default (x) => x\n   */\n  valueLabelFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n} : void 0;\nexport default Slider;","map":null,"metadata":{},"sourceType":"module"}