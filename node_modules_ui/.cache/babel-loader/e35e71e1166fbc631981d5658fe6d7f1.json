{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/styles';\nimport { exactProp } from '@material-ui/utils';\nimport { ThemeContext as StyledEngineThemeContext } from '@material-ui/styled-engine';\nimport useTheme from './useTheme';\n\nfunction InnerThemeProvider(props) {\n  var theme = useTheme();\n  return /*#__PURE__*/React.createElement(StyledEngineThemeContext.Provider, {\n    value: typeof theme === 'object' ? theme : {}\n  }, props.children);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? InnerThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node\n} : void 0;\n/**\n * This component makes the `theme` available down the React tree.\n * It should preferably be used at **the root of your component tree**.\n */\n\nfunction ThemeProvider(props) {\n  var children = props.children,\n      localTheme = props.theme;\n  return /*#__PURE__*/React.createElement(MuiThemeProvider, {\n    theme: localTheme\n  }, /*#__PURE__*/React.createElement(InnerThemeProvider, null, children));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A theme object. You can provide a function to extend the outer theme.\n   */\n  theme: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  process.env.NODE_ENV !== \"production\" ? ThemeProvider.propTypes = exactProp(ThemeProvider.propTypes) : void 0;\n}\n\nexport default ThemeProvider;","map":null,"metadata":{},"sourceType":"module"}