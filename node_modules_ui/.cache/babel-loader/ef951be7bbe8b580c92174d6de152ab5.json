{"ast":null,"code":"import _defineProperty from \"/home/architgupta923/data-digital-twin/ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\"; // @inheritedComponent ButtonBase\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { deepmerge } from '@material-ui/utils';\nimport { unstable_composeClasses as composeClasses } from '@material-ui/unstyled';\nimport { alpha } from '../styles';\nimport ButtonBase from '../ButtonBase';\nimport { capitalize } from '../utils';\nimport useThemeProps from '../styles/useThemeProps';\nimport experimentalStyled from '../styles/experimentalStyled';\nimport toggleButtonClasses, { getToggleButtonUtilityClass } from './toggleButtonClasses';\n\nvar overridesResolver = function overridesResolver(props, styles) {\n  var styleProps = props.styleProps;\n  return deepmerge(styles.root || {}, _extends({}, styles[\"size\".concat(capitalize(styleProps.size))], _defineProperty({}, \"& .\".concat(toggleButtonClasses.label), styles.label)));\n};\n\nvar useUtilityClasses = function useUtilityClasses(styleProps) {\n  var classes = styleProps.classes,\n      selected = styleProps.selected,\n      disabled = styleProps.disabled,\n      size = styleProps.size;\n  var slots = {\n    root: ['root', selected && 'selected', disabled && 'disabled', \"size\".concat(capitalize(size))],\n    label: ['label']\n  };\n  return composeClasses(slots, getToggleButtonUtilityClass, classes);\n};\n\nvar ToggleButtonRoot = experimentalStyled(ButtonBase, {}, {\n  name: 'MuiToggleButton',\n  slot: 'Root',\n  overridesResolver: overridesResolver\n})(function (_ref) {\n  var theme = _ref.theme,\n      styleProps = _ref.styleProps;\n  return _extends({}, theme.typography.button, {\n    borderRadius: theme.shape.borderRadius,\n    padding: 11,\n    border: \"1px solid \".concat(alpha(theme.palette.action.active, 0.12)),\n    color: alpha(theme.palette.action.active, 0.38),\n    '&.Mui-selected': {\n      color: theme.palette.action.active,\n      backgroundColor: alpha(theme.palette.action.active, 0.12),\n      '&:hover': {\n        backgroundColor: alpha(theme.palette.action.active, 0.15)\n      }\n    },\n    '&.Mui-disabled': {\n      color: alpha(theme.palette.action.disabled, 0.12)\n    },\n    '&:hover': {\n      textDecoration: 'none',\n      // Reset on mouse devices\n      backgroundColor: alpha(theme.palette.text.primary, 0.05),\n      '@media (hover: none)': {\n        backgroundColor: 'transparent'\n      }\n    }\n  }, styleProps.size === 'small' && {\n    padding: 7,\n    fontSize: theme.typography.pxToRem(13)\n  }, styleProps.size === 'large' && {\n    padding: 15,\n    fontSize: theme.typography.pxToRem(15)\n  });\n});\nvar ToggleButtonLabel = experimentalStyled('span', {}, {\n  name: 'MuiToggleButton',\n  slot: 'Label'\n})({\n  /* Styles applied to the label wrapper element. */\n  width: '100%',\n  // Ensure the correct width for iOS Safari\n  display: 'inherit',\n  alignItems: 'inherit',\n  justifyContent: 'inherit'\n});\nvar ToggleButton = /*#__PURE__*/React.forwardRef(function ToggleButton(inProps, ref) {\n  var props = useThemeProps({\n    props: inProps,\n    name: 'MuiToggleButton'\n  });\n\n  var children = props.children,\n      className = props.className,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      _props$disableFocusRi = props.disableFocusRipple,\n      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,\n      onChange = props.onChange,\n      onClick = props.onClick,\n      selected = props.selected,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 'medium' : _props$size,\n      value = props.value,\n      other = _objectWithoutPropertiesLoose(props, [\"children\", \"className\", \"disabled\", \"disableFocusRipple\", \"onChange\", \"onClick\", \"selected\", \"size\", \"value\"]);\n\n  var styleProps = _extends({}, props, {\n    disabled: disabled,\n    disableFocusRipple: disableFocusRipple,\n    size: size\n  });\n\n  var classes = useUtilityClasses(styleProps);\n\n  var handleChange = function handleChange(event) {\n    if (onClick) {\n      onClick(event, value);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n    }\n\n    if (onChange) {\n      onChange(event, value);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ToggleButtonRoot, _extends({\n    className: clsx(classes.root, className),\n    disabled: disabled,\n    focusRipple: !disableFocusRipple,\n    ref: ref,\n    onClick: handleChange,\n    onChange: onChange,\n    value: value,\n    styleProps: styleProps,\n    \"aria-pressed\": selected\n  }, other), /*#__PURE__*/React.createElement(ToggleButtonLabel, {\n    className: classes.label,\n    styleProps: styleProps\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? ToggleButton.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the component is disabled.\n   * @default false\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * If `true`, the  keyboard focus ripple is disabled.\n   * @default false\n   */\n  disableFocusRipple: PropTypes.bool,\n\n  /**\n   * If `true`, the ripple effect is disabled.\n   *\n   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure\n   * to highlight the element by applying separate styles with the `.Mui-focusedVisible` class.\n   * @default false\n   */\n  disableRipple: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * If `true`, the button is rendered in an active state.\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * The size of the component.\n   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.\n   * @default 'medium'\n   */\n  size: PropTypes.oneOf(['large', 'medium', 'small']),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The value to associate with the button when selected in a\n   * ToggleButtonGroup.\n   */\n  value: PropTypes.any.isRequired\n} : void 0;\nexport default ToggleButton;","map":null,"metadata":{},"sourceType":"module"}